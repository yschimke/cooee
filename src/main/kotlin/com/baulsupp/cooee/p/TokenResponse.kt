// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baulsupp.cooee.p.TokenResponse in api.proto
package com.baulsupp.cooee.p

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class TokenResponse(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING_VALUE",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val token: String? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<TokenResponse, TokenResponse.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.token = token
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is TokenResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (token != other.token) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + token.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (token != null) result += """token=$token"""
    return result.joinToString(prefix = "TokenResponse{", separator = ", ", postfix = "}")
  }

  fun copy(token: String? = this.token, unknownFields: ByteString = this.unknownFields):
      TokenResponse = TokenResponse(token, unknownFields)

  class Builder : Message.Builder<TokenResponse, Builder>() {
    @JvmField
    var token: String? = null

    fun token(token: String?): Builder {
      this.token = token
      return this
    }

    override fun build(): TokenResponse = TokenResponse(
      token = token,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<TokenResponse> = object : ProtoAdapter<TokenResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      TokenResponse::class, 
      "type.googleapis.com/com.baulsupp.cooee.p.TokenResponse", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: TokenResponse): Int {
        var size = value.unknownFields.size
        if (value.token != null) size += ProtoAdapter.STRING_VALUE.encodedSizeWithTag(1,
            value.token)
        return size
      }

      override fun encode(writer: ProtoWriter, value: TokenResponse) {
        if (value.token != null) ProtoAdapter.STRING_VALUE.encodeWithTag(writer, 1, value.token)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): TokenResponse {
        var token: String? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> token = ProtoAdapter.STRING_VALUE.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return TokenResponse(
          token = token,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: TokenResponse): TokenResponse = value.copy(
        token = value.token?.let(ProtoAdapter.STRING_VALUE::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
