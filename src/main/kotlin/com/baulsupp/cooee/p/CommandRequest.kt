// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baulsupp.cooee.p.CommandRequest in api.proto
package com.baulsupp.cooee.p

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.checkElementsNotNull
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.collections.List
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class CommandRequest(
  parsed_command: List<String> = emptyList(),
  @field:WireField(
    tag = 2,
    adapter = "com.baulsupp.cooee.p.ResponseType#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "responseType"
  )
  @JvmField
  val response_type: ResponseType = ResponseType.DEFAULT_RESPONSE,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<CommandRequest, CommandRequest.Builder>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED,
    jsonName = "parsedCommand"
  )
  @JvmField
  val parsed_command: List<String> = immutableCopyOf("parsed_command", parsed_command)

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.parsed_command = parsed_command
    builder.response_type = response_type
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CommandRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (parsed_command != other.parsed_command) return false
    if (response_type != other.response_type) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + parsed_command.hashCode()
      result = result * 37 + response_type.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (parsed_command.isNotEmpty()) result += """parsed_command=${sanitize(parsed_command)}"""
    result += """response_type=$response_type"""
    return result.joinToString(prefix = "CommandRequest{", separator = ", ", postfix = "}")
  }

  fun copy(
    parsed_command: List<String> = this.parsed_command,
    response_type: ResponseType = this.response_type,
    unknownFields: ByteString = this.unknownFields
  ): CommandRequest = CommandRequest(parsed_command, response_type, unknownFields)

  class Builder : Message.Builder<CommandRequest, Builder>() {
    @JvmField
    var parsed_command: List<String> = emptyList()

    @JvmField
    var response_type: ResponseType = ResponseType.DEFAULT_RESPONSE

    fun parsed_command(parsed_command: List<String>): Builder {
      checkElementsNotNull(parsed_command)
      this.parsed_command = parsed_command
      return this
    }

    fun response_type(response_type: ResponseType): Builder {
      this.response_type = response_type
      return this
    }

    override fun build(): CommandRequest = CommandRequest(
      parsed_command = parsed_command,
      response_type = response_type,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<CommandRequest> = object : ProtoAdapter<CommandRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      CommandRequest::class, 
      "type.googleapis.com/com.baulsupp.cooee.p.CommandRequest", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: CommandRequest): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(1, value.parsed_command)
        if (value.response_type != ResponseType.DEFAULT_RESPONSE) size +=
            ResponseType.ADAPTER.encodedSizeWithTag(2, value.response_type)
        return size
      }

      override fun encode(writer: ProtoWriter, value: CommandRequest) {
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 1, value.parsed_command)
        if (value.response_type != ResponseType.DEFAULT_RESPONSE)
            ResponseType.ADAPTER.encodeWithTag(writer, 2, value.response_type)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): CommandRequest {
        val parsed_command = mutableListOf<String>()
        var response_type: ResponseType = ResponseType.DEFAULT_RESPONSE
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> parsed_command.add(ProtoAdapter.STRING.decode(reader))
            2 -> try {
              response_type = ResponseType.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return CommandRequest(
          parsed_command = parsed_command,
          response_type = response_type,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: CommandRequest): CommandRequest = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
