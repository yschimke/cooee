// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api.proto
package com.baulsupp.cooee.p

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class LogRequest(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  val message: String? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.baulsupp.cooee.p.LogSeverity#ADAPTER"
  )
  @JvmField
  val severity: LogSeverity? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<LogRequest, LogRequest.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.message = message
    builder.severity = severity
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is LogRequest) return false
    return unknownFields == other.unknownFields
        && message == other.message
        && severity == other.severity
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + message.hashCode()
      result = result * 37 + severity.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (message != null) result += """message=${sanitize(message)}"""
    if (severity != null) result += """severity=$severity"""
    return result.joinToString(prefix = "LogRequest{", separator = ", ", postfix = "}")
  }

  fun copy(
    message: String? = this.message,
    severity: LogSeverity? = this.severity,
    unknownFields: ByteString = this.unknownFields
  ): LogRequest = LogRequest(message, severity, unknownFields)

  class Builder : Message.Builder<LogRequest, Builder>() {
    @JvmField
    var message: String? = null

    @JvmField
    var severity: LogSeverity? = null

    fun message(message: String?): Builder {
      this.message = message
      return this
    }

    fun severity(severity: LogSeverity?): Builder {
      this.severity = severity
      return this
    }

    override fun build(): LogRequest = LogRequest(
      message = message,
      severity = severity,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<LogRequest> = object : ProtoAdapter<LogRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      LogRequest::class, 
      "type.googleapis.com/com.baulsupp.cooee.p.LogRequest"
    ) {
      override fun encodedSize(value: LogRequest): Int = 
        ProtoAdapter.STRING.encodedSizeWithTag(1, value.message) +
        LogSeverity.ADAPTER.encodedSizeWithTag(2, value.severity) +
        value.unknownFields.size

      override fun encode(writer: ProtoWriter, value: LogRequest) {
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.message)
        LogSeverity.ADAPTER.encodeWithTag(writer, 2, value.severity)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): LogRequest {
        var message: String? = null
        var severity: LogSeverity? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> message = ProtoAdapter.STRING.decode(reader)
            2 -> try {
              severity = LogSeverity.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return LogRequest(
          message = message,
          severity = severity,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: LogRequest): LogRequest = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }
  }
}
