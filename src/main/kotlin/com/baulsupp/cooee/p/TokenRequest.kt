// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baulsupp.cooee.p.TokenRequest in api.proto
package com.baulsupp.cooee.p

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class TokenRequest(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val service: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING_VALUE",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val name: String? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<TokenRequest, TokenRequest.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.service = service
    builder.name = name
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is TokenRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (service != other.service) return false
    if (name != other.name) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + service.hashCode()
      result = result * 37 + name.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """service=${sanitize(service)}"""
    if (name != null) result += """name=$name"""
    return result.joinToString(prefix = "TokenRequest{", separator = ", ", postfix = "}")
  }

  fun copy(
    service: String = this.service,
    name: String? = this.name,
    unknownFields: ByteString = this.unknownFields
  ): TokenRequest = TokenRequest(service, name, unknownFields)

  class Builder : Message.Builder<TokenRequest, Builder>() {
    @JvmField
    var service: String = ""

    @JvmField
    var name: String? = null

    fun service(service: String): Builder {
      this.service = service
      return this
    }

    fun name(name: String?): Builder {
      this.name = name
      return this
    }

    override fun build(): TokenRequest = TokenRequest(
      service = service,
      name = name,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<TokenRequest> = object : ProtoAdapter<TokenRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      TokenRequest::class, 
      "type.googleapis.com/com.baulsupp.cooee.p.TokenRequest", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: TokenRequest): Int {
        var size = value.unknownFields.size
        if (value.service != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.service)
        if (value.name != null) size += ProtoAdapter.STRING_VALUE.encodedSizeWithTag(2, value.name)
        return size
      }

      override fun encode(writer: ProtoWriter, value: TokenRequest) {
        if (value.service != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.service)
        if (value.name != null) ProtoAdapter.STRING_VALUE.encodeWithTag(writer, 2, value.name)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): TokenRequest {
        var service: String = ""
        var name: String? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> service = ProtoAdapter.STRING.decode(reader)
            2 -> name = ProtoAdapter.STRING_VALUE.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return TokenRequest(
          service = service,
          name = name,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: TokenRequest): TokenRequest = value.copy(
        name = value.name?.let(ProtoAdapter.STRING_VALUE::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
