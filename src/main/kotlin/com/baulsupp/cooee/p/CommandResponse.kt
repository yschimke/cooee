// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baulsupp.cooee.p.CommandResponse in api.proto
package com.baulsupp.cooee.p

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class CommandResponse(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING_VALUE",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val location: String? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING_VALUE",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val message: String? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.baulsupp.cooee.p.ImageUrl#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "imageUrl"
  )
  @JvmField
  val image_url: ImageUrl? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.baulsupp.cooee.p.CommandStatus#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val status: CommandStatus = CommandStatus.UNDEFINED,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<CommandResponse, CommandResponse.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.location = location
    builder.message = message
    builder.image_url = image_url
    builder.status = status
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CommandResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (location != other.location) return false
    if (message != other.message) return false
    if (image_url != other.image_url) return false
    if (status != other.status) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + location.hashCode()
      result = result * 37 + message.hashCode()
      result = result * 37 + image_url.hashCode()
      result = result * 37 + status.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (location != null) result += """location=$location"""
    if (message != null) result += """message=$message"""
    if (image_url != null) result += """image_url=$image_url"""
    result += """status=$status"""
    return result.joinToString(prefix = "CommandResponse{", separator = ", ", postfix = "}")
  }

  fun copy(
    location: String? = this.location,
    message: String? = this.message,
    image_url: ImageUrl? = this.image_url,
    status: CommandStatus = this.status,
    unknownFields: ByteString = this.unknownFields
  ): CommandResponse = CommandResponse(location, message, image_url, status, unknownFields)

  class Builder : Message.Builder<CommandResponse, Builder>() {
    @JvmField
    var location: String? = null

    @JvmField
    var message: String? = null

    @JvmField
    var image_url: ImageUrl? = null

    @JvmField
    var status: CommandStatus = CommandStatus.UNDEFINED

    fun location(location: String?): Builder {
      this.location = location
      return this
    }

    fun message(message: String?): Builder {
      this.message = message
      return this
    }

    fun image_url(image_url: ImageUrl?): Builder {
      this.image_url = image_url
      return this
    }

    fun status(status: CommandStatus): Builder {
      this.status = status
      return this
    }

    override fun build(): CommandResponse = CommandResponse(
      location = location,
      message = message,
      image_url = image_url,
      status = status,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<CommandResponse> = object : ProtoAdapter<CommandResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      CommandResponse::class, 
      "type.googleapis.com/com.baulsupp.cooee.p.CommandResponse", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: CommandResponse): Int {
        var size = value.unknownFields.size
        if (value.location != null) size += ProtoAdapter.STRING_VALUE.encodedSizeWithTag(1,
            value.location)
        if (value.message != null) size += ProtoAdapter.STRING_VALUE.encodedSizeWithTag(2,
            value.message)
        if (value.image_url != null) size += ImageUrl.ADAPTER.encodedSizeWithTag(3, value.image_url)
        if (value.status != CommandStatus.UNDEFINED) size +=
            CommandStatus.ADAPTER.encodedSizeWithTag(4, value.status)
        return size
      }

      override fun encode(writer: ProtoWriter, value: CommandResponse) {
        if (value.location != null) ProtoAdapter.STRING_VALUE.encodeWithTag(writer, 1,
            value.location)
        if (value.message != null) ProtoAdapter.STRING_VALUE.encodeWithTag(writer, 2, value.message)
        if (value.image_url != null) ImageUrl.ADAPTER.encodeWithTag(writer, 3, value.image_url)
        if (value.status != CommandStatus.UNDEFINED) CommandStatus.ADAPTER.encodeWithTag(writer, 4,
            value.status)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): CommandResponse {
        var location: String? = null
        var message: String? = null
        var image_url: ImageUrl? = null
        var status: CommandStatus = CommandStatus.UNDEFINED
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> location = ProtoAdapter.STRING_VALUE.decode(reader)
            2 -> message = ProtoAdapter.STRING_VALUE.decode(reader)
            3 -> image_url = ImageUrl.ADAPTER.decode(reader)
            4 -> try {
              status = CommandStatus.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return CommandResponse(
          location = location,
          message = message,
          image_url = image_url,
          status = status,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: CommandResponse): CommandResponse = value.copy(
        location = value.location?.let(ProtoAdapter.STRING_VALUE::redact),
        message = value.message?.let(ProtoAdapter.STRING_VALUE::redact),
        image_url = value.image_url?.let(ImageUrl.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
