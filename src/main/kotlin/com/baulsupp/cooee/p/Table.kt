// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baulsupp.cooee.p.Table in api.proto
package com.baulsupp.cooee.p

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.checkElementsNotNull
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.redactElements
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

class Table(
  columns: List<TableColumn> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Table, Table.Builder>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "com.baulsupp.cooee.p.TableColumn#ADAPTER",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val columns: List<TableColumn> = immutableCopyOf("columns", columns)

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.columns = columns
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Table) return false
    if (unknownFields != other.unknownFields) return false
    if (columns != other.columns) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + columns.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (columns.isNotEmpty()) result += """columns=$columns"""
    return result.joinToString(prefix = "Table{", separator = ", ", postfix = "}")
  }

  fun copy(columns: List<TableColumn> = this.columns, unknownFields: ByteString =
      this.unknownFields): Table = Table(columns, unknownFields)

  class Builder : Message.Builder<Table, Builder>() {
    @JvmField
    var columns: List<TableColumn> = emptyList()

    fun columns(columns: List<TableColumn>): Builder {
      checkElementsNotNull(columns)
      this.columns = columns
      return this
    }

    override fun build(): Table = Table(
      columns = columns,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<Table> = object : ProtoAdapter<Table>(
      FieldEncoding.LENGTH_DELIMITED, 
      Table::class, 
      "type.googleapis.com/com.baulsupp.cooee.p.Table", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: Table): Int {
        var size = value.unknownFields.size
        size += TableColumn.ADAPTER.asRepeated().encodedSizeWithTag(1, value.columns)
        return size
      }

      override fun encode(writer: ProtoWriter, value: Table) {
        TableColumn.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.columns)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): Table {
        val columns = mutableListOf<TableColumn>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> columns.add(TableColumn.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return Table(
          columns = columns,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: Table): Table = value.copy(
        columns = value.columns.redactElements(TableColumn.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
